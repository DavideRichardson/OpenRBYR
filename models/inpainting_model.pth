# save_inpainting_model.py

import torch
import torch.nn as nn
import os

# Simple placeholder model architecture
class InpaintingModel(nn.Module):
    def __init__(self):
        super(InpaintingModel, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)
        self.relu = nn.ReLU()
        self.conv2 = nn.Conv2d(16, 1, kernel_size=3, padding=1)

    def forward(self, x):
        x = self.conv1(x)
        x = self.relu(x)
        x = self.conv2(x)
        return x

# Create model and save it
model = InpaintingModel()
torch.save(model.state_dict(), "models/inpainting_model.pth")

print("âœ… inpainting_model.pth saved to models/")

